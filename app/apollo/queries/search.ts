import gql from "graphql-tag";
const AsyncPostUserFragment = gql`
	fragment AsyncPostUserFragment on CommonUser {
		_id
		type
		F{
			_id
			name
			image
			type
      roles{
        _id
        role
        user{
          _id
          name
          image
          type
        }
      }
		}
		C{
			_id
			name
			image
			type
      roles{
        _id
        role
        user{
          _id
          name
          image
          type
        }
      }
		}
		T{
			_id
			name
			image
			type
      roles{
        _id
        role
        user{
          _id
          name
          image
          type
        }
      }
		}
		I{
			_id
			name
			image
			type
      roles{
        _id
        role
        user{
          _id
          name
          image
          type
        }
      }
		}
		E{
			_id
			name
			type
		}
		G{
			_id
		}
		L{
			_id
			name
			image
			type
      roles{
        _id
        role
        user{
          _id
          name
          image
          type
        }
      }
		}
		Q{
			_id
			type
		}
	}
`
const AsyncPostFrag = gql`
  fragment AsyncPostFrag on Post {
    _id
		content
		rawContent
		user{
			...AsyncPostUserFragment
		}
		owner{
			...AsyncPostUserFragment
		}
		userTo{
			...AsyncPostUserFragment
		}
		type
		sport{
			_id
			image
			name
		}
		video{
			name
			src
		}
		video_id
		is_live
		isEvent
		isGMC
		minute
		skills
		hashtags
		isGAME
		hasLink
		links{
			_id
			title
			description
			url
			images
			status
			date
			user{
				...AsyncPostUserFragment
			}
		}
		isLiked
		isTagged
		media{
			_id
			status
			date
			url
			name
      type
			object_type
			height
			width
			orientation
			user{
				...AsyncPostUserFragment
			}
			userTo{
				...AsyncPostUserFragment
			}
			tags{
				...AsyncPostUserFragment
			}
		}
		timeAgo
		status
		date
		pages
		commentType
		file{
			_id
			status
			date
			url
			name
      type
			object_type
			height
			width
			orientation
			user{
				...AsyncPostUserFragment
			}
			userTo{
				...AsyncPostUserFragment
			}
			tags{
				...AsyncPostUserFragment
			}
		}
    likes{
      _id
      type
      user{
				...AsyncPostUserFragment
			}
    }
    views{
      _id
      type
      user{
				...AsyncPostUserFragment
			}
    }
    shares{
      _id
      type
      user{
				...AsyncPostUserFragment
			}
    }
    comments{
      _id
      user{
				...AsyncPostUserFragment
			}
      content
      rawContent
      owner{
				...AsyncPostUserFragment
			}
      userTo{
				...AsyncPostUserFragment
			}
      contentUsers{
				...AsyncPostUserFragment
			}
      replies{
        _id
        content
        rawContent
        user{
          ...AsyncPostUserFragment
        }
        owner{
          ...AsyncPostUserFragment
        }
        userTo{
          ...AsyncPostUserFragment
        }
        contentUsers{
          ...AsyncPostUserFragment
        }
        media {
          _id
          status
          date
          url
          name
        }
      }
      tag
      team{
        _id
        name
        image
      }
      media{
        _id
        status
        date
        url
        name
      }
    }
    shareType
    isShared
  }
`;

const EVENTS_FRAG = gql`
  ${AsyncPostUserFragment}
  fragment EVENTS_FRAG on Event {
    _id
    status
    created_at
    type
    likes{
      _id
    }
    user{
      ...AsyncPostUserFragment
    }
    managers{
      _id
      type
      name
      image
    }
    color
    event_type
    fullTimestamp
    endFullTimestamp
    team{
      _id
      name
      image
      type
      sport{
        _id
        image
        name
      }
    }
    teams{
      _id
      name
      image
      type
      sport{
        _id
        image
        name
      }
    }
    name
    desc
    isOneDay
    invites{
      _id
      status
      date
      user{
        _id
        name
        image
        type
      }
    }
    place{
      _id
      name
      coord{
        lat
        lng
      }
    }
    coord{
      lon
      lat
    }
  }
`

export const SEARCH = gql`
  ${EVENTS_FRAG}
  ${AsyncPostFrag}
  query search($query: String) {
    search(query: $query) {
      people {
        _id
        name
        image
        email
        followers {
          _id
        }
      }
      events{
        ...EVENTS_FRAG
      }
      training {
        _id
        title
        description
        date
        type
        user {
          _id
          name
          image
        }
        file {
          _id
          url
          user{
            ...AsyncPostUserFragment
          }
          name
          type
          video {
            _id
            src
          }
        }
      }
      posts{
        ...AsyncPostFrag
        sharedObject{
          _id
          type
          POST{
            ...AsyncPostFrag
          }
          SESSIONFILE{
            _id
            status
            date
            commentCount
            commentType
            description
            link
            isFavoured
            isOwner
          }
        }
      }
      teams{
        _id
        name
        image
        email
        followers {
          _id
        }
      }
      clubs{
        _id
        name
        image
        email
        followers {
          _id
        }
      }
      institutions{
        _id
        name
        image
        email
        followers {
          _id
        }
      }
      tournaments{
        _id
        name
        image
        email
        followers {
          _id
        }
      }
    }
  }
`
